{
  "compilerOptions": {
    "composite": true,                                   /* 프로젝트 참조와 함께 TypeScript 프로젝트를 사용할 수 있는 제약 조건을 활성화합니다. */

    /* Language and Environment */
    "target": "ESNext",                                  /* 내보낸 JavaScript 에 대한 JavaScript 언어 버전을 설정하고 호환되는 라이브러리 선언을 포함합니다. */
    "lib": [                                             /* 대상 런타임 환경을 설명하는 번들 라이브러리 선언 파일 집합을 지정하십시오. */
      "ESNext",
      "DOM",
      "DOM.Iterable"
    ],
    "jsx": "preserve",                                   /* 생성할 JSX 코드를 지정합니다. */
    "experimentalDecorators": true,                      /* TC39 2단계 드래프트 장식자에 대한 실험적 지원을 활성화합니다. */
    "useDefineForClassFields": true,                     /* ECMA 스크립트 표준 준수 클래스 필드를 내보냅니다. */

    /* Modules */
    "module": "esnext",                                  /* 생성할 모듈 코드를 지정합니다. */
    "rootDir": ".",                         /* 원본 파일 내의 루트 폴더를 지정하십시오. */
    "moduleResolution": "Node",                          /* TypeScript 가 지정된 모듈 지정자에서 파일을 검색하는 방법을 지정합니다. */
    "baseUrl": "..",                                      /* 비상대적 모듈 이름을 확인할 기본 디렉토리를 지정합니다. */
    "paths": {                                           /* 추가 조회 위치로 다시 매핑할 항목 집합을 지정합니다. */
    },
    "types": [                                           /* 원본 파일에서 참조되지 않고 포함할 유형 패키지 이름을 지정하십시오. */
      "vite/client",
      "vue/ref-macros",
      "vite-plugin-pages/client",
      "vite-plugin-vue-layouts/client"
    ],
    "resolveJsonModule": true,                           /* .json 파일 가져오기를 사용합니다. */

    /* Emit */
    "sourceMap": false,                                  /* 내보낸 JavaScript 파일에 대한 소스 맵 파일을 만듭니다. */
    "importHelpers": true,                               /* tslib 에서 도우미 기능을 파일별로 포함하는 대신 프로젝트당 한 번씩 가져올 수 있습니다. */

    /* Interop Constraints */
    "isolatedModules": false,                            /* 각 파일을 다른 가져오기에 의존하지 않고 안전하게 transfile 할 수 있는지 확인합니다. */
    "allowSyntheticDefaultImports": true,                /* 모듈에 기본 내보내기가 없는 경우 'y에서 x 가져오기'를 허용합니다. */
    "esModuleInterop": true,                             /* Common 가져오기 지원을 쉽게 하기 위해 추가 JavaScript 내보내기 JS 모듈. 그러면 형식 호환성에 대해 'allowSyntheticDefaultImports' 가 활성화됩니다. */
    "forceConsistentCasingInFileNames": true,            /* 수입할 때 케이스가 올바른지 확인하십시오. */

    /* Type Checking */
    "strict": true,                                      /* 모든 엄격한 유형 검사 옵션을 사용합니다. */
    "strictNullChecks": true,                            /* 유형 검사 시 'null' 과 'undefined' 를 고려하십시오. */
    "noUnusedLocals": true,                              /* 로컬 변수를 읽지 않은 경우 오류 보고를 활성화합니다. */

    /* Completeness */
    "skipLibCheck": true                                 /* 모든 .d.ts 파일을 확인하는 유형을 건너뜁니다. */
  },
  "include": [
    "**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ],
  "references": [{ "path": "./tsconfig.node.json"}]
}
